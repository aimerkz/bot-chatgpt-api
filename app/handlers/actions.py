from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from app.clients.openai import OpenAIClient
from app.inlines.actions import get_initial_keyboard, get_continue_keyboard
from app.states.waiting import WaitingState
from app.utils.enums import ActionsEnum

action_router = Router(name=__name__)


@action_router.message(Command('start'))
async def handle_start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–æ–º–∞–Ω–¥—ã /start"""

    await message.answer(
        text=f'–ü—Ä–∏–≤–µ—Ç ü§ù, {message.from_user.full_name}! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=get_initial_keyboard(),
    )


@action_router.callback_query(F.data == ActionsEnum.ASK)
async def handle_ask_question(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'"""

    await callback.message.edit_text(
        text='–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ ChatGPT',
    )
    await state.set_state(WaitingState.waiting_for_question)


@action_router.callback_query(F.data == ActionsEnum.NEW_QUESTION)
async def handle_new_question(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ '–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å'"""

    await state.clear()
    await callback.message.edit_text(
        text='–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å',
    )
    await state.set_state(WaitingState.waiting_for_question)


@action_router.message(StateFilter(WaitingState.waiting_for_question))
async def handle_question_input(
    message: Message,
    state: FSMContext,
    openai_client: OpenAIClient,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""

    question = message.text
    await message.answer('–û—Ç–ø—Ä–∞–≤–∏–ª —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∂–¥–µ–º –æ—Ç–≤–µ—Ç ‚åõ')

    answer = await openai_client.ask(question, state)
    await state.update_data(last_response=answer)

    await message.reply(answer)
    await state.set_state(WaitingState.waiting_for_button)
    await message.answer(
        text='–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?',
        reply_markup=get_continue_keyboard(),
    )


@action_router.callback_query(F.data == ActionsEnum.ASK_AGAIN)
async def handle_continue_chat(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ'"""

    await callback.message.edit_text(
        text='–ù–∞–ø–∏—à–∏ —Å–≤–æ–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å',
    )
    await state.set_state(WaitingState.waiting_for_question)


@action_router.callback_query(F.data == ActionsEnum.EXIT)
async def handle_handle_exit(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ '–í—ã–π—Ç–∏'"""

    await query.message.edit_text(
        text='–î–æ –≤—Å—Ç—Ä–µ—á–∏ üëã',
    )
    await state.clear()
