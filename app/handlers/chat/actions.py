from aiogram import F, Router, flags
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove

from clients.openai import OpenAIClient
from keyboards.actions import get_exit_keyboard, get_initial_keyboard
from states.state import DialogState
from utils.enums import ActionsEnum

action_router = Router(name=__name__)


@action_router.message(Command('start'))
async def handle_start_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–æ–º–∞–Ω–¥—ã /start"""

    await state.clear()
    await message.answer(
        text=f'–ü—Ä–∏–≤–µ—Ç ü§ù, {message.from_user.full_name}! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=get_initial_keyboard(),
    )


@action_router.message(Command('help'))
async def cmd_help(message: Message):
    help_text = (
        '<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n\n'
        '<b>1. –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</b> ‚Äî —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É\n'
        '<b>2. –í—ã–π—Ç–∏</b> ‚Äî —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞\n'
        '<b>3. –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ</b> ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É\n'
        '<b>4. –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å</b> ‚Äî —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å\n'
        '<b>5. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b> ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥\n\n'
        '–ê–∫—Ç–∏–≤–∏—Ä—É–π –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π /start, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!'
    )
    await message.answer(help_text)


@action_router.message(F.text == ActionsEnum.ASK.value)
async def handle_ask_question(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'"""

    await message.answer(
        text='–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ ChatGPT',
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.set_state(DialogState.active)


@action_router.message(F.text == ActionsEnum.EXIT.value)
async def handle_handle_exit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ '–í—ã–π—Ç–∏'"""

    await state.clear()
    await message.answer(
        text='–î–æ –≤—Å—Ç—Ä–µ—á–∏ üëã',
        reply_markup=ReplyKeyboardRemove(),
    )


@action_router.message(StateFilter(DialogState.active))
@flags.chat_action('typing')
async def handle_question_input(
    message: Message,
    state: FSMContext,
    openai_client: OpenAIClient,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""

    await message.answer('–û—Ç–ø—Ä–∞–≤–∏–ª —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∂–¥–µ–º –æ—Ç–≤–µ—Ç ‚åõ')

    answer = await openai_client.ask(message.text, state)
    await state.update_data(last_response=answer)

    await message.reply(answer)

    await message.answer(
        text='–ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–∞—Ç—å <b>–í—ã–π—Ç–∏</b>, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥',
        reply_markup=get_exit_keyboard(),
    )
