from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from states.state import ImageState
from utils.enums import ActionsEnum

image_router = Router(name=__name__)


@image_router.message(F.text == ActionsEnum.GENERATE_IMAGE)
async def handle_generate_image(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫"""

    await state.clear()
    await message.answer(
        text='–°–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Ö–æ—á–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å? (–ß–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3)',
    )
    await state.set_state(ImageState.count_images)


@image_router.message(StateFilter(ImageState.count_images))
async def handle_image_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫"""

    try:
        count = int(message.text)
        if 1 <= count <= 3:
            await state.update_data(image_count=count)
            await message.answer(text='–û–ø–∏—à–∏, –∫–∞–∫—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å')
            await state.set_state(ImageState.to_generate)
        else:
            await message.answer(text='–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3 üò†')
    except (TypeError, ValueError):
        await message.answer(text='–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3 üò†')
