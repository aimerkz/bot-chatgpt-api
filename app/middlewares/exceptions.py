from typing import Any, Awaitable, Callable, Dict

from aiogram import BaseMiddleware
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from app.exceptions.openai import (
    BadRequestOIException,
    NotFoundOIException,
    PermissionOIException,
    RateLimitImageOIException,
    ServerOIException,
)
from app.inlines.actions import get_initial_keyboard


class OpenAIExceptionMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: dict[str, Any],
    ):
        state: FSMContext = data.get('state')

        try:
            await handler(event, data)
        except (
            PermissionOIException,
            NotFoundOIException,
            BadRequestOIException,
            RateLimitImageOIException,
            ServerOIException,
        ) as error:
            await self._handle_exception(event, error, state)

    async def _handle_exception(
        self,
        event: Message,
        exception: Exception,
        state: FSMContext,
    ):
        error_messages = {
            PermissionOIException: 'üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –ü—Ä–æ–≤–µ—Ä—å –∫–ª—é—á–∏–∫ API –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π VPN',
            NotFoundOIException: '‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É –Ω–∞ API ChatGTP',
            BadRequestOIException: '‚ùå –ü—Ä–æ–≤–µ—Ä—å –∑–∞–ø—Ä–æ—Å –∫ API ChatGPT',
            RateLimitImageOIException: 'üò± –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
            ServerOIException: 'üòû –£ ChatGPT –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ',
        }

        error_message = error_messages.get(type(exception), 'üíî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫(')
        await event.answer(error_message)
        await self.return_to_main_menu(event, state)

    @staticmethod
    async def return_to_main_menu(event: Message, state: FSMContext):
        await event.answer(
            text='–ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üòä',
            reply_markup=get_initial_keyboard(),
        )
        await state.clear()
